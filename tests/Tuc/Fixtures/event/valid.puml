@startuml Valid cases

== Valid use case ==

actor "Generic Service" as GenericService <<consents>>
participant "InteractionCollector" as InteractionCollector <<consents>>
collections "InteractionStream" as InteractionStream <<consents>>

activate GenericService

== InteractionEvent ==

GenericService -> InteractionCollector ++: Post(InteractionEvent)
    InteractionCollector ->> InteractionStream: InteractionEvent
InteractionCollector --> GenericService --: unit

== InteractionEvent.Confirmed ==

GenericService -> InteractionCollector ++: Post(InteractionEvent)
    InteractionCollector ->> InteractionStream: InteractionEvent.Confirmed
InteractionCollector --> GenericService --: unit

== InteractionEvent.Other ==

GenericService -> InteractionCollector ++: Post(InteractionEvent)
    InteractionCollector ->> InteractionStream: InteractionEvent.Other
InteractionCollector --> GenericService --: unit

== InteractionEvent.Interaction ==

GenericService -> InteractionCollector ++: Post(InteractionEvent)
    InteractionCollector ->> InteractionStream: InteractionEvent.Interaction
InteractionCollector --> GenericService --: unit

== InteractionEvent.Rejected by user ==

GenericService -> InteractionCollector ++: Post(InteractionEvent)
    InteractionCollector ->> InteractionStream: InteractionEvent.Rejected.UserRejected
InteractionCollector --> GenericService --: unit

== InteractionEvent.Rejected Foo ==

GenericService -> InteractionCollector ++: Post(InteractionEvent)
    InteractionCollector ->> InteractionStream: InteractionEvent.Rejected.UserRejected.Foo
InteractionCollector --> GenericService --: unit

== InteractionEvent.Rejected - expired ==

GenericService -> InteractionCollector ++: Post(InteractionEvent)
    InteractionCollector ->> InteractionStream: InteractionEvent.Rejected.Expired
InteractionCollector --> GenericService --: unit

deactivate GenericService

@enduml
